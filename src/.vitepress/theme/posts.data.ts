import { writeFile, mkdir } from 'node:fs/promises'
import { existsSync } from 'node:fs'

import { createContentLoader, type SiteConfig } from 'vitepress'

export interface Post {
  title: string
  url: string
  date: {
    time: number
    string: string
  }
  excerpt: string | undefined
}

export interface PostsData {
  posts: Post[]
  postsPerPage: number
  numPages: number
}

declare const data: PostsData

export { data }

function asyncCallWithCache<K>(fn: (key: K) => Promise<void>): (key: K) => Promise<void> {
  let cache: K
  return async (key: K) => {
    if (cache !== key) {
      cache = key
      await fn(key)
    }
  }
}

function getPostsPerPage(): number {
  const config: SiteConfig = (globalThis as any).VITEPRESS_CONFIG
  return config.userConfig.themeConfig?.postsPerPage ?? Number.MAX_SAFE_INTEGER
}

async function createPagesDynamicRoutes(numPages: number): Promise<void> {
  const pagesDir = `src/pages`
  const pagesDynamicRouteMdPath = `${pagesDir}/[page].md`
  const pagesDynamicRouteTsPath = `${pagesDir}/[page].paths.ts`

  if (!existsSync(pagesDir)) {
    await mkdir(pagesDir, { recursive: true })
  }

  await writeFile(
    pagesDynamicRouteMdPath,
    `\
---
layout: home
---
<!--
This file is auto-generated by src/.vitepress/theme/posts.data.ts
DO NOT EDIT THIS FILE DIRECTLY
-->
`
  )
  await writeFile(
    pagesDynamicRouteTsPath,
    `\
// This file is auto-generated by src/.vitepress/theme/posts.data.ts
// DO NOT EDIT THIS FILE DIRECTLY
export default {
  paths() {
    return Array.from({ length: ${numPages} }).map((_, i) => ({
      params: { page: String(i + 1) },
    }))
  },
}
`
  )
}

const createPagesDynamicRoutesWithCache = asyncCallWithCache(createPagesDynamicRoutes)

export default createContentLoader('posts/*.md', {
  excerpt: '<!-- more -->',
  async transform(raw): Promise<PostsData> {
    const posts = raw
      .map(({ url, frontmatter, excerpt }) => ({
        title: frontmatter.title,
        url,
        excerpt,
        date: formatDate(frontmatter.date),
      }))
      .sort((a, b) => b.date.time - a.date.time)
    const postsPerPage = getPostsPerPage()
    const numPages = Math.ceil(posts.length / postsPerPage)
    await createPagesDynamicRoutesWithCache(numPages)
    return {
      posts,
      postsPerPage,
      numPages,
    }
  },
})

function formatDate(raw: string): Post['date'] {
  const date = new Date(raw)
  date.setUTCHours(12)
  return {
    time: +date,
    string: date.toLocaleDateString('zh-CN', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }),
  }
}
